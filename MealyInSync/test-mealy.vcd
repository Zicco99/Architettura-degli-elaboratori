$date
	Thu Oct 10 11:40:39 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testm1 $end
$var wire 1 ! z $end
$var reg 1 " clock $end
$var reg 2 # x [1:2] $end
$scope module m $end
$var wire 1 " clock $end
$var wire 2 $ x [1:2] $end
$var wire 1 ! z $end
$var wire 2 % xsy [1:2] $end
$var wire 2 & outreg [1:2] $end
$var wire 2 ' inreg [1:2] $end
$scope module om $end
$var wire 1 ! z $end
$var wire 2 ( x [1:2] $end
$var wire 2 ) s [1:2] $end
$upscope $end
$scope module r $end
$var wire 1 " clock $end
$var wire 1 * enable $end
$var wire 2 + inval [1:2] $end
$var wire 2 , z [1:2] $end
$var reg 2 - stato [1:2] $end
$upscope $end
$scope module s $end
$var wire 1 " clock $end
$var wire 1 . enable $end
$var wire 2 / z [1:2] $end
$var wire 2 0 inval [1:2] $end
$var reg 2 1 stato [1:2] $end
$upscope $end
$scope module sm $end
$var wire 2 2 s [1:2] $end
$var wire 2 3 x [1:2] $end
$var wire 2 4 news [1:2] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 4
b0 3
b0 2
b0 1
b1 0
b0 /
1.
b0 -
b0 ,
b0 +
1*
b0 )
b0 (
b1 '
b0 &
b0 %
b0 $
b0 #
0"
0!
$end
#2
b1 &
b1 )
b1 /
b1 1
b1 2
1"
#3
0"
#4
b1 #
b1 $
b1 +
#5
b11 '
b11 0
b11 4
b1 %
b1 (
b1 ,
b1 -
b1 3
1"
#6
0"
#8
b10 '
b10 0
b10 4
b11 &
b11 )
b11 /
b11 1
b11 2
1"
#9
0"
#10
b0 #
b0 $
b0 +
#11
1!
b0 '
b0 0
b0 4
b10 &
b10 )
b10 /
b10 1
b10 2
b0 %
b0 (
b0 ,
b0 -
b0 3
1"
#12
0"
#14
b1 '
b1 0
b1 4
0!
b0 &
b0 )
b0 /
b0 1
b0 2
1"
#15
0"
#17
b1 &
b1 )
b1 /
b1 1
b1 2
1"
#18
0"
#20
1"
